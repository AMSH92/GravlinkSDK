// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios17.5 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name GlinkFramework
import AVFoundation
import Alamofire
import CallKit
import Combine
import Foundation
@_exported import GlinkFramework
import PushKit
import SocketIO
import Swift
import SwiftUI
import UserNotifications
import WebRTC
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Gravlink {
  public static func configure(apiKey: Swift.String)
  public static func setUser(user: GlinkFramework.GLinkUser)
  public static func setFCMNotificationToken(token: GlinkFramework.GLinkToken)
  public static func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, didReceive response: UserNotifications.UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Swift.Void)
  public static func gLinkPushRegistry(_ registry: PushKit.PKPushRegistry, didUpdate pushCredentials: PushKit.PKPushCredentials, for type: PushKit.PKPushType)
  public static func gLinkPushRegistry(_ registry: PushKit.PKPushRegistry, didReceiveIncomingPushWith payload: PushKit.PKPushPayload, for type: PushKit.PKPushType, completion: @escaping () -> Swift.Void)
}
public enum GLinkNotificationType : Swift.String, Swift.Encodable {
  case pcm
  case voip
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct GLinkToken : Swift.Encodable {
  public init(token: Swift.String, type: GlinkFramework.GLinkNotificationType)
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct GLinkUser : Swift.Encodable {
  public init(userId: Swift.String, fistName: Swift.String, lastName: Swift.String, PCMNotificationToken: Swift.String?, VOIPNotificationToken: Swift.String?)
  public func encode(to encoder: any Swift.Encoder) throws
}
@_hasMissingDesignatedInitializers public class Logger {
  public enum LogLevel : Swift.String {
    case info
    case warning
    case error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public static func log(_ message: Swift.String, level: GlinkFramework.Logger.LogLevel = .info)
  @objc deinit
}
public struct EmptyApiModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct EnvelopeApiModel<T> : Swift.Codable where T : Swift.Decodable, T : Swift.Encodable {
  public let data: T?
  public let message: Swift.String?
  public let hasError: Swift.Bool?
  public init(from decoder: any Swift.Decoder) throws
  public init()
  public func encode(to encoder: any Swift.Encoder) throws
}
extension GlinkFramework.GLinkNotificationType : Swift.Equatable {}
extension GlinkFramework.GLinkNotificationType : Swift.Hashable {}
extension GlinkFramework.GLinkNotificationType : Swift.RawRepresentable {}
extension GlinkFramework.Logger.LogLevel : Swift.Equatable {}
extension GlinkFramework.Logger.LogLevel : Swift.Hashable {}
extension GlinkFramework.Logger.LogLevel : Swift.RawRepresentable {}
